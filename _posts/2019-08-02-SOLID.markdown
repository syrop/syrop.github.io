---
layout: post
title:  "SOLID (Wiktor's rant)"
date:   2019-08-02 20:32:00 +0200
categories: jekyll update
---

This is not a very serious article.

If you want a serious article about architecture, I recommend the ones about [MV-something][mv-article] and [repository][repository-article] in this blog.

In the present article I am trying to debunk [SOLID design][solid]. I do recognize the importance of some elements of it, but I do not deem it to be a particular design pattern, or something worth giving attention to in this blog, other than in a little joking manner.

SOLID probably stands for (a loose quote from [Wikipedia][solid]):

> Single responsibility (principle) open-closed (principle) Liskov substitution (principle) interface segregation (principle) dependency inversion (principle).

I don't know how the authors came up with the SOLID acrornym.

## KISS

Wikipedia also mentions [KISS], which is meant to stand for *keep it simple, stupid*, to which I reply: *I am not stupid*, or even come up with a name that is, actually, positively ***stupid***:

* **K**eep
* **I**t
* **S**imple
* **S**tupid

* **M**odular
* **Y**oung

* **A**synchronous
* **S**uper
* **S**tructure

I do not understand who is coming up with these names! Please, if you do understand what either of these contrived names really mean, [issue a ticket][ticket] in this blog. Please show me some non-trivial example that is using this, and tell me why you needed to come up with names like [SOLID] or [KISS], as opposed to the common [mvvm] or [mvp]. If I understand what problem your project solves, as opposed to serving as a pure demonstration of a design pattern, and I understand the actual application of [SOLID], [KISS] or both, I will change my stance on the matter and give you credit for it.

## The coffe maker

I understand the value Dagger creates. I use Kodein instead, but I recognize Dagger as a piece of valuable software, although not my first preference.

I do not understand at all, however, the [coffee machine example][coffee-machine]. I am able to follow the consecutive steps, but has anyone actually implemented a coffee maker with Dagger? If this is not the case, this example is invalid, even if the points it is trying to convey are invalid.

I am watching the [presentation][dagger] about Dagger given by Jake Wharton. Jake in it pretends to write an implementation of a Tweeter client.

Is Jake the author of Tweeter? Tweeter is not even open source!

I do understant the examples presented in the YouTube, just not the choice of these particular examples, as opposed to Dagger being used presenting a non-trivial production project.

## Plaid

There is actually a practice of using non-trivial applications for demonstrating design patterns, even [dependency injection][di]. The project is called [Plaid], and probably it serves the same purpose as the present blog does.

The above project, [Plaid], comes with its own [blog][di] discussing architecture, and it has probably the same goal as my very own blog does.

## Donations

The present article doesn't really contribute much in terms of discussing a particular desing pattern. It really only tries to debunk some of the other so-called patterns I am aware of.

I do have a [donations page][donate], but usually in the articles that I actually do request donations I try to contribute more of original material.

I hope, however, that the present article has presented a little my point of view on bad acronyms, as well as promoted a professional [blog][di] run by Google, which presents significant Android-specific patterns.


[mv-article]: https://syrop.github.io/jekyll/update/2019/06/30/mv-disambiguation.html
[repository-article]: https://syrop.github.io/jekyll/update/2019/07/12/repository-pattern-testing.html
[solid]: https://en.wikipedia.org/wiki/SOLID
[kiss]: https://en.wikipedia.org/wiki/KISS_principle
[ticket]: https://github.com/syrop/syrop.github.io/issues
[mvvm]: https://en.wikipedia.org/wiki/Model-view-viewmodel
[mvp]: https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter
[coffee-machine]: https://dagger.dev/users-guide
[dagger]: https://www.youtube.com/watch?v=plK0zyRLIP8
[di]: https://medium.com/androiddevelopers/dependency-injection-in-a-multi-module-project-1a09511c14b7
[plaid]: https://github.com/android/plaid
[donate]: https://syrop.github.io/donate/

